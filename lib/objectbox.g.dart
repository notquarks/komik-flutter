// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/entity/chread_entity.dart';
import 'models/entity/comic_entity.dart';
import 'models/entity/library_entity.dart';
import 'models/entity/recent_entity.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 572276110520249480),
      name: 'ComicEntity',
      lastPropertyId: const IdUid(7, 4518916374952017025),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6059118532655011869),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 1872177001266930912),
            name: 'hid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6857381106056183410),
            name: 'title',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2209322196750800859),
            name: 'slug',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6809023579075812042),
            name: 'chap',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5071461967351139467),
            name: 'cvUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 4518916374952017025),
            name: 'comicsId',
            type: 11,
            flags: 520,
            indexId: const IdUid(2, 2590358157654627052),
            relationTarget: 'LibraryEntity')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'historys', srcEntity: 'ChReadEntity', srcField: 'comic')
      ]),
  ModelEntity(
      id: const IdUid(3, 5557962613499310370),
      name: 'LibraryEntity',
      lastPropertyId: const IdUid(2, 2296936803066592906),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6726811471902149395),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 2296936803066592906),
            name: 'comicId',
            type: 11,
            flags: 520,
            indexId: const IdUid(3, 6188511435489046797),
            relationTarget: 'ComicEntity')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 5417380158934321732),
      name: 'RecentEntity',
      lastPropertyId: const IdUid(2, 7268052615165744082),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8134039504129847663),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 7268052615165744082),
            name: 'historyId',
            type: 11,
            flags: 520,
            indexId: const IdUid(4, 5938065525604754924),
            relationTarget: 'ChReadEntity')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(5, 1755330369342083268),
      name: 'ChReadEntity',
      lastPropertyId: const IdUid(8, 6572059197953696482),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 257972397042005021),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 1736158061589199752),
            name: 'hid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2721163798200270488),
            name: 'comic_id',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7866686949582474494),
            name: 'comic_hid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6918321489032666226),
            name: 'ch_num',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8762116438526885456),
            name: 'ch_title',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 3125758226194398658),
            name: 'lastRead',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 6572059197953696482),
            name: 'comicId',
            type: 11,
            flags: 520,
            indexId: const IdUid(5, 6524296489003156183),
            relationTarget: 'ComicEntity')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(5, 1755330369342083268),
      lastIndexId: const IdUid(5, 6524296489003156183),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [2093866077128426254],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        5711774206955703075,
        7285190785375772113,
        1961647398539106913,
        2203206497137318833,
        5130188229467115087,
        3741819855319900965,
        238091739546673308,
        8427720212109435031,
        394394602538038633,
        6634345048189603765,
        8278537964541304612,
        5528885779401389485,
        6337685752370541484,
        7605252326520422893,
        7511877158699179014
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    ComicEntity: EntityDefinition<ComicEntity>(
        model: _entities[0],
        toOneRelations: (ComicEntity object) => [object.comics],
        toManyRelations: (ComicEntity object) => {
              RelInfo<ChReadEntity>.toOneBacklink(8, object.id,
                  (ChReadEntity srcObject) => srcObject.comic): object.historys
            },
        getId: (ComicEntity object) => object.id,
        setId: (ComicEntity object, int id) {
          object.id = id;
        },
        objectToFB: (ComicEntity object, fb.Builder fbb) {
          final hidOffset = fbb.writeString(object.hid);
          final titleOffset = fbb.writeString(object.title);
          final slugOffset = fbb.writeString(object.slug);
          final chapOffset = fbb.writeString(object.chap);
          final cvUrlOffset = fbb.writeString(object.cvUrl);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, hidOffset);
          fbb.addOffset(2, titleOffset);
          fbb.addOffset(3, slugOffset);
          fbb.addOffset(4, chapOffset);
          fbb.addOffset(5, cvUrlOffset);
          fbb.addInt64(6, object.comics.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ComicEntity(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              hid: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              title: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              slug: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              chap: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              cvUrl: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''));
          object.comics.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.comics.attach(store);
          InternalToManyAccess.setRelInfo(
              object.historys,
              store,
              RelInfo<ChReadEntity>.toOneBacklink(
                  8, object.id, (ChReadEntity srcObject) => srcObject.comic),
              store.box<ComicEntity>());
          return object;
        }),
    LibraryEntity: EntityDefinition<LibraryEntity>(
        model: _entities[1],
        toOneRelations: (LibraryEntity object) => [object.comic],
        toManyRelations: (LibraryEntity object) => {},
        getId: (LibraryEntity object) => object.id,
        setId: (LibraryEntity object, int id) {
          object.id = id;
        },
        objectToFB: (LibraryEntity object, fb.Builder fbb) {
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.comic.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = LibraryEntity(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0));
          object.comic.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          object.comic.attach(store);
          return object;
        }),
    RecentEntity: EntityDefinition<RecentEntity>(
        model: _entities[2],
        toOneRelations: (RecentEntity object) => [object.history],
        toManyRelations: (RecentEntity object) => {},
        getId: (RecentEntity object) => object.id,
        setId: (RecentEntity object, int id) {
          object.id = id;
        },
        objectToFB: (RecentEntity object, fb.Builder fbb) {
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.history.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = RecentEntity(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0));
          object.history.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          object.history.attach(store);
          return object;
        }),
    ChReadEntity: EntityDefinition<ChReadEntity>(
        model: _entities[3],
        toOneRelations: (ChReadEntity object) => [object.comic],
        toManyRelations: (ChReadEntity object) => {},
        getId: (ChReadEntity object) => object.id,
        setId: (ChReadEntity object, int id) {
          object.id = id;
        },
        objectToFB: (ChReadEntity object, fb.Builder fbb) {
          final hidOffset = fbb.writeString(object.hid);
          final comic_hidOffset = fbb.writeString(object.comic_hid);
          final ch_numOffset = fbb.writeString(object.ch_num);
          final ch_titleOffset = fbb.writeString(object.ch_title);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, hidOffset);
          fbb.addInt64(2, object.comic_id);
          fbb.addOffset(3, comic_hidOffset);
          fbb.addOffset(4, ch_numOffset);
          fbb.addOffset(5, ch_titleOffset);
          fbb.addInt64(6, object.lastRead.millisecondsSinceEpoch);
          fbb.addInt64(7, object.comic.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ChReadEntity(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              hid: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              comic_id:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              comic_hid: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              ch_num: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              ch_title: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              lastRead: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0)));
          object.comic.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.comic.attach(store);
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [ComicEntity] entity fields to define ObjectBox queries.
class ComicEntity_ {
  /// see [ComicEntity.id]
  static final id =
      QueryIntegerProperty<ComicEntity>(_entities[0].properties[0]);

  /// see [ComicEntity.hid]
  static final hid =
      QueryStringProperty<ComicEntity>(_entities[0].properties[1]);

  /// see [ComicEntity.title]
  static final title =
      QueryStringProperty<ComicEntity>(_entities[0].properties[2]);

  /// see [ComicEntity.slug]
  static final slug =
      QueryStringProperty<ComicEntity>(_entities[0].properties[3]);

  /// see [ComicEntity.chap]
  static final chap =
      QueryStringProperty<ComicEntity>(_entities[0].properties[4]);

  /// see [ComicEntity.cvUrl]
  static final cvUrl =
      QueryStringProperty<ComicEntity>(_entities[0].properties[5]);

  /// see [ComicEntity.comics]
  static final comics = QueryRelationToOne<ComicEntity, LibraryEntity>(
      _entities[0].properties[6]);
}

/// [LibraryEntity] entity fields to define ObjectBox queries.
class LibraryEntity_ {
  /// see [LibraryEntity.id]
  static final id =
      QueryIntegerProperty<LibraryEntity>(_entities[1].properties[0]);

  /// see [LibraryEntity.comic]
  static final comic = QueryRelationToOne<LibraryEntity, ComicEntity>(
      _entities[1].properties[1]);
}

/// [RecentEntity] entity fields to define ObjectBox queries.
class RecentEntity_ {
  /// see [RecentEntity.id]
  static final id =
      QueryIntegerProperty<RecentEntity>(_entities[2].properties[0]);

  /// see [RecentEntity.history]
  static final history = QueryRelationToOne<RecentEntity, ChReadEntity>(
      _entities[2].properties[1]);
}

/// [ChReadEntity] entity fields to define ObjectBox queries.
class ChReadEntity_ {
  /// see [ChReadEntity.id]
  static final id =
      QueryIntegerProperty<ChReadEntity>(_entities[3].properties[0]);

  /// see [ChReadEntity.hid]
  static final hid =
      QueryStringProperty<ChReadEntity>(_entities[3].properties[1]);

  /// see [ChReadEntity.comic_id]
  static final comic_id =
      QueryIntegerProperty<ChReadEntity>(_entities[3].properties[2]);

  /// see [ChReadEntity.comic_hid]
  static final comic_hid =
      QueryStringProperty<ChReadEntity>(_entities[3].properties[3]);

  /// see [ChReadEntity.ch_num]
  static final ch_num =
      QueryStringProperty<ChReadEntity>(_entities[3].properties[4]);

  /// see [ChReadEntity.ch_title]
  static final ch_title =
      QueryStringProperty<ChReadEntity>(_entities[3].properties[5]);

  /// see [ChReadEntity.lastRead]
  static final lastRead =
      QueryIntegerProperty<ChReadEntity>(_entities[3].properties[6]);

  /// see [ChReadEntity.comic]
  static final comic =
      QueryRelationToOne<ChReadEntity, ComicEntity>(_entities[3].properties[7]);
}
